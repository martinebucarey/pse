 
Perifericos

Además del procesador y memoria, la mayoría de los sitemas embebidos
contienen unos pocos dispositivos de hardware extra. Algunos de estos
dispositios son específicos a la aplicación, mientras que otros -como los
relojes y puertos seriales- son útiles en una gran variedad de sistemas.
Los que residen junto con el procesador dentro del mismo chip se los
denomina periféricos internos, u on-chip. Los que se encuentran fuera
del chip donde está el procesador se los denomina de manera opuesta,
es decir, periféricos externos. En este capítulo se detalla la
mayoría de los probemas de software comunes que surgen cuando se programan
periféricos de ambos tipos.

Registros de estado y de control
----

La interfaz básica entre un procesador embebido y un dispositivo periférico
es un conjunto de registro de estado y control. Estos registros son parte
del hardware del periférico, y sus ubicaciones, tamanio y significados
individuales son característicos de los periféricos. Por ejemplo, 
el significado de los bis de los registros de un controlador serial son muy diferentes a los
de los contadores o relojes. En esta sección se encuentra explicado la 
manera de manipular el contenidos de los registros de estado y control
directamente desde programas en C/C++.

Dependiendo del disenio del procesador y la placa, los dispsitios perifericos
se encuentran localizacos en el espacio de memoria del procesador o dentro
del espacio de E/S. De hecho, es comun en sistemas embebidos  que se incluyan
periféricos de ambos tipos. Se los denomina periféricos mapeados en memoria
y periféricos mapeados en E/S respectivamentes. De los dos tipos, los periféricos
mapeados en memoria son los más fácies de utilizar y por lo tanto su popularidad
aumenta.

Los registros de estado y control de periféricos mapeados en memoria se pueden
parecer a variables ordinarias. Por ejemplo, es posible simplemente declarar 
declarar un puntero en C a un registro o bloque de registros, y establecer
la dirección (valor del puntero) explícitamente. Por ejemplo, el registro
PORTB utilizado en el capítulo 2 es mapeado en memoria en la dirección 
física 0x25. Por tal motivo la función toggleLed puede ser escrita completamente
en C, somo se muestra a continuación.

unsigned char * puerto_B = (unsigned char *) 0x25;

void toggleLed(void)
{
    *puerto_B ^= LED_ROJO;    /* Read, xor, and modify. */
}    /* toggleLed() */

Un puntero a un registro de 8 bits es declarado y explicitamente inicializado
a la dirección 0x25. A partir de este momento el puntero al registro
trabaja como cualquier puntero a una variable de tipo char de 8 bits.


Note, de cualquier manera, que existe una diferencia muy importante entre 
registros de dispositivos y variables ordinarias. El contenido de un registro
de dispositivo puede cambiar sin que el programa intervenga o se notifique
del cambio. Esto sucede porque el contenido del registro puede ser modificado
por el hardware del dispositivo. De manera contraria, el contenido de una
variable no cambiará a menos que el programa modifique la misma explicitamente.
Por esa razón, se dice que el contenido de un registro de dispositivo
es volátil, o sujeto a cambiar sin notificación previa.

En C y C++ se debe utilizar la palabra clave volatile cuando se 
declaran punteros a registros de dispositivos.
La misma le indica al compilador que no puede realizar suposiciones acerca
del dato almacenado en esa dirección. Por ejemplo, si el compilador
observa una escritura a una ubicación volátil y luego inmediatamente 
le sigue otra instrucción de escritura a la misma ubicación, el compilador 
no asume  que la primer escritura es innecesaria. En otras palabras, la
palabra clave volatile instruye a la fase de optimización del compilador 
a tratar a esa variable como volátil, y que su conducta no puede ser
predecida en tiempo de compilación.

Prosiguiendo con el ejemplo anterior, se muestra aquí debajo el uso 
de volatile para advertir al compilador acerca del registro PORTB :

volatile unsigned char * puerto_B = (unsigned char *) 0x25;

Es importante notar que es erróneo interpretar, en esta declaración,
que el puntero en si mismo es volátil. De hecho, el valor de la
variable puerto_B tendrá el valor 0x25 durante toda la ejecución del programa
(a menos que el valor sea modificado por alguna instrucción del programa, por
supuesto). Mas bien es el dato apuntado el que está sujeto a cambiar
sin que el programa intervenga. Este detalle es muy sutil y es facilmente
confundible al pensar mucho en el tema. Solamente recuerde que la ubicación
de un registro es fija aunque su contenido podría no serlo. Por lo que, si se
utiliza la palabra clave volatile, el compilador asumirá lo mismo.

La principal desventaja de los demás tipos de registros, registros mapeados
a E/S, es que no hay una manera estandar de acceder a ellos desde C o C++. 
Estos registros son unicamente accesibles con la ayuda de instrucciones
de lenguaje máquina especiales. Y estas instrucciones especificas del procesador
no son soportadas por los estandares del lenguaje C o C++. Por lo tanto
es necesario utilizar rutinas de bibliotecas especiales, o codigo en lenguaje
ensamblador entre lineas, para leer y escribir los registros de un
dispositivo mapeado al espacio de E/S.


La filosofia del controlador de dispositivo
------------


NOTA: En el disenio de controladores (drivers) de dispositivos se debe
siempre enfocar una meta común : ocultar el hardware completamente.

Cuando se finaliza, el modulo controlador de dispositivo debe ser la unica
pieza de software en el sistema entero que lee o escribe a los registros
de estado y control particular directamente. Además, si el dispositivo 
genera interrupciones, la rutina de servicio de interrupciones que 
atiende las mismas debe ser una parte integral del controlador de dispositivo.
En esta sección se explica el por qué se recomienda esta filosofía y de cómo
puede ser lograda.


Por supuesto, intentar ocultar el hardware completamente es difícil. Sea la
interfaz de programación que se seleccione siempre reflejará las
características generales del dispositivo. Esa característica es esperada
e inevitable. La meta tiene que ser que la interfaz de programación
desarrollada no debería necesitar cambios is el periférico final es reemplazado
con otro de su misma clase general. Por ejemplo, todos los dispositios de memoria
Flash comparten los conceptos de sectores (aunque el tamanio del sector
puede diferir entre chips). Una operación de borrado puede ser realizada
unicamente en un sector entero, y una vez eliminado, bytes individuales
de palabras pueden ser reescritos. Por lo tanto, la interfaz desarrollada
en un controlador de memoria Flash debería ser util con cualquier
dispositivo de memoria similar. 

Controladores de dispositivos para sistemas embebidos son bastante
diferentes con respecto a los controladores para estaciones de trabajo.
En una compputadora moderna, los controladores de dispositivos estan
desarrollados con el objetivo de satisfacer los requerimientos del sistema
operativo. Por ejemplo, los sistema operativos de PC usualmente imponen
requerimientos estrictos en la interfaz de software entre el SO y una
placa de red. El controlador de dispositivo para una placa de red particular
debe cumplir con la interfaz de software, sin importar las caracteristicas
y capacidades del hardware subyacente. Los programas de aplicacion que 
necesitan utilizar la placa de red están forzados a utilizar la API
de red provista por el sistema operativo y no tienen acceso directo a la
placa en si misma. En este caso la meta de ocultar el hardware completamente
es alcanzada facilmente.

En contraste, el software de aplicación en un sistema embebido  puede acceder al
hardware facilmente. De hecho, debido a que todo el software es
vinculado en conjunto en una imagen binaria individual, raramente existe
una
distinción entre la aplicación, sistema operativo, y controladores
de dispositios.
Esta distinción, como la aplicación de restricciones de acceso al hardware,
son meramente responsabilidades de los desarrolladores de software.
Ambas son decisiones de disenio que los desarrolladores deben realizar
concienzudamente. En otras palabras, los implementadores de software 
embebido pueden tener más flexibilidad en el disenio del software
que sus pares no embebidos.

Los beneficios de un buen disenio de controlador de dispositivo son tres.
Primero, debido a la modularización, la estructura de todo el software
se comprende más facilmente. Segundo, como hay unicamente un modulo 
que interactua directamente con los registros del periférico, el estado
del hardware puede ser verificado mas precisamente. Finalmente, el ultimo 
beneficio pero no por eso menos imporante, los cambios en el software que
resutan de los cambios en el hardware están localizados en el controlador
de dispositivo. Todos estos beneficios ayudan a reducir el numero total
de errores en el software embebido. 
Pero se debe estar dispuesto a
poner un poco de esfuerzo extra al momento del diseño con el fin de 
alcanzar estos beneficios.

Si acuerda con esta filosofía de ocultar todas las especificaciones del hardware
e interacciones dentro del controlador de dispositivo usualmente debe 
implementar y utilizar los cinco componentes de la lista presentada a continuación.
Para realizar una implementación del controlador lo más simple e incremental
como sea posible, se debería desarrollar estos elementos en el orden
presentado.

1. Una estructura de datos que se superpone (overlay) a los registros de estado
y de control del dispositivo mapeados en memoria.

El primer paso en el proceso de desarrollo del driver es crear una estructrua
(struct) al estilo del lenguaje C que represente de manera exacta los registros
mapeados en memoria del dispositivo. Generalmente, se necesita estudiar
el libro de datos para el periférico y crear una tabla para los registros
de estado y de control con sus desplazamientos.
Entonces, comenzando con el registro con la dirección más baja, se 
va completando la tabla de la estructura. Si existen ubicaciones no 
utilizada o reservada entre los registros se puede ubicar variables
vacias para ocupar espacio adicional acorde.

Un ejemplo de una estructura de datos del estilo se presenta a continuación.
La misma describe los registros de uno de los puertos presentes dentro
del atmega328p. El dispositivo tiene tres registros, dispuestos como se muestra
a continuación en la estructura de datos puerto_b. Cada registro es de 
8 bits y deberían ser manipulados como un unsigned char.

struct puerto_b
{
	unsigned char data_es;	/* udr0 i/o data */
	unsigned char baud_rate_h;    /* ubrr0h baud rate high */
	unsigned char baud_rate_l;    /* ubrr0l baud rate low */;
	unsigned char _reserved;    /* espacio sin utilizar */
	unsigned char status_control_c;    /* ucsr0c USART Control and Status C */
	unsigned char status_control_b;    /* ucsr0b USART Control and Status B */
	unsigned char status_control_a;    /* ucsr0a USART Control and Status A */
}

Para leer y escribir bits individuales mas facilmente es una practica comun
definir mascaras de bits para usos comunes:

#define RECEIVER_ENABLE 0x10        /* RXEN0 Habilitar la recepcion */
#define TRANSMITTER_ENABLE 0x08     /* TXEN0 Habilitar la transmicion */
#define CHARACTER_SIZE_0 0x20       /* UCSZ00 Numero de bits del dato de e/s */
#define CHARACTER_SIZE_1 0x40       /* UCSZ01 Numero de bits del dato de e/s */
#define READY_TO_READ 0x80          /* RXC0 Dato listo para leer */
#define READY_TO_WRITE 0x20         /* UDRE0 Buffer vacio listo para escribir */


2. Un conjunto de variables para mantener el estado actual del hardware
y del controlador del dispositivo

El segundo paso en el proceso de desarrollo del controlador es definir
qué variables se necesitan para mantener el estado del hardware y 
del controlador del disposivo. Por ejemplo, en el caso del controlador 
serial probablemente se necesita conocer si el
hardware ha sido inicializado.

Algunos controladores de dispositivos crean mas de un dispositivo de software.
Esto es un dispositivo puramente lógico que es implementado por encima
del hardware periférico básico. Por ejemplo, es facil imaginar
que mas que un reloj por software puede ser implementado desde una
unidad contador/rejoj (timer/counter). La unidad contador/reloj se configura
para generar un tick de reloj periódico, y el controlador de dispositivo
gestionaría un conjunto de relojes por software de varias duraciones,
manteniendo información del estado de cada reloj software.

3. Una rutina para incializar el hardware a un estado conocido

Una vez que se conoce como mantener el estado de los dispositivos 
lógicos y físicos es momento de comenzar a escribir las funciones que 
interactuan y controlan el dispositivo. Es conveniente comenzar 
con la rutina de inicialización del hardware. Además, necesitará
esa rutina primero, y esa es una buena manera de entender como interactuar
con el dispositivo.

4. Un conjunto de rutinas que, en su conjunto, presentan una API 
a los usuarios del controlador de dispositivo

Luego de que se haya inicializado el dispositivo correctamente, es
momento de agregar otras funcionalidades al controlador. Es en este
paso en donde se deben establecer los nombres y propósitos de varias 
rutinas, como así también sus respectivos parámetros y valores devueltos.
Una vez definidas es el momento de implementar cada función junto
con un caso de test mínimo. Se presentan ejemplos de tales rutinas
en la siguiente sección.

5. Una o varias rutinas de atención de interrupciones

Es conveniente diseniar, implementar y verificar la mayoría de as rutinas
del controlador de dispositivo antes de habilitar las interrupciones.
Encontrar el origen de los problemas relacionados con las interrupciones
es muy difícil. Además, si existen errores (bugs) en otros módulos
controladores la búsqueda del problema relacionado con las interrupciones
puede ser imposible de encontrar. Por lo que es mejor utilizar 
E/S programada (polling) primero, para obtener el controlador funcionando.
De esta manera se comprenderá cómo trabaja el dispositivo (y que 
realmente esté funcionando) cuando se comienza a buscar la fuente
de los problemas relacionados con las interrupciones. Finalmente, cabe
decir que suele haber casi siempre problemas relacionados con las interrupciones.

Un controlador de dispositivo serial
---------

El ejemplo de controlador de dispositivo que se presenta está diseniado
para controlar un puerto serial. El hardware para este controlador
de dispositivo utiliza un periférico UART (pronunciado "you-art" y es el acrónimo de
Universal Asynchronous Receiver Transmitter) que se encuentra en el atmega328p.
Un UART es un componente que recibe y envía de manera serial y asincrónica
información. Asincrónico significa que el dato puede llegar en cualquier
momento, similar a la entrada provista por un teclado. Un UART acepta
un byte de forma paralela desde el procesador. El byte es serializado,
y cada bit es transmitido en el momento apropiado. La recepción trabaja
a la inversa.

Es importante aclarar que el atmega328p tiene en su chip un USART (Universal Synchronous and Asynchronous serial Receiver and Transmitter) que puede trabajar
en modo sincrónico, y tambien, como periférico SPI maestro. En nuestro
controlador utilizamos unicamente el modo asincrónico no SPI.

Antes de diseniar y desarrollar ell controlador de dispositvo 
es importante entender el diagrama de bloques del hardware -el cual
presenta cómo las seniales van y vienen desde el periférico al exterior del mismo.
Tipicamente, esta tarea se logra  observando las porciones relevantes de los
esquemáticos, y leyendo las hojas de datos de los diferentes integrados.
Un diagrama de bloques para el puerto serial se muestra en la Figura 71.

Qué integrados se necesitan programar para controlar el periférico?
Para este ejemplo de controlador serial unicamente nos enfocamos
en el USART. La información de los registros está localizada en la hoja
de datos del microcontrolador atmega328p. Mientras se lee esta información
se debe tener en cuenta que la meta es entender varios conceptos. Algunos
de ellos son :
- La estructura de los registros para controlar el periférico, que incluye
el cómo configurar las comunicaciones y como obtener y enviar
datos desde el periférico.
- Las direcciones de los registros de estado y de control.
- El método que se debe utilizar para la operación del periférico (E/S 
programada o con interrupciones).
- Si se utilizan interrupcinoes entonces se debe entender qué condiciones
pueden causar interrupciones, cómo el controlador de software se informa
de las mismas, y cómo debe atenderlas.

Se debe obtener un control claro sobre lo que necesita el controlador 
de dispositivo para llevar adelante la tarea del periférico dentro del
sistema. Una vez que estos pasos iniciales están completos, 
se puede continuar con la tarea de escribir el controlador de software 
para el dispositivo.

Registros interfaz
-----

El primer paso para el controlador de dispositivo serial es definir
la interfaz de los registros. Para este ejemplo, utilizamos 
una estructura que se superponga a los registros del USART, los cuales
están mapeados a memoria. La estructura uart_t se muestra a continuación :


typedef struct 
{
	uint8_t data_es;	/* udr0 i/o data */
	uint6_t baud_rate_h;    /* ubrr0h baud rate high */
	uint8_t baud_rate_l;    /* ubrr0l baud rate low */;
	uint8_t _reserved;    /* espacio sin utilizar */
	uint8_t status_control_c;    /* ucsr0c USART Control and Status C */
	uint8_t status_control_b;    /* ucsr0b USART Control and Status B */
	uint8_t status_control_a;    /* ucsr0a USART Control and Status A */
} volatile uart_t




